/* Generated By:JavaCC: Do not edit this line. NormalRegexParser.java */
package gramatics;

import nodes.*;

public class NormalRegexParser implements NormalRegexParserConstants {
    public static void main(String[] args) {
        System.out.println("Normal Regex Parser");
    }

  final public RegexNode input() throws ParseException {
    RegexNode node = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 0:
    case EOL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EOL:
        jj_consume_token(EOL);
        break;
      case 0:
        jj_consume_token(0);
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  {if (true) return null;}
      break;
    case CHAR:
    case LEFTCLOSER:
      node = line();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EOL:
        jj_consume_token(EOL);
        break;
      case 0:
        jj_consume_token(0);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                  {if (true) return node;}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public RegexNode line() throws ParseException {
    RegexNode node = null;
    node = regex();
                   {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public RegexNode regex() throws ParseException {
    RegexNode node = null;
    RegexNode node1 = null;
    RegexNode node2 = null;
    node1 = expr();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CHAR:
      case ALTERNATIVE:
      case LEFTCLOSER:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CHAR:
      case LEFTCLOSER:
        node2 = expr();
                     if(node1.getType()!=RegexNodeEnum.EMPTY){node=new RegexNode(RegexNodeEnum.EMPTY,node1);node.addToList(node2);node1=node;}else{node1.addToList(node2);}
        break;
      case ALTERNATIVE:
        jj_consume_token(ALTERNATIVE);
        node2 = regex();
                                    node = new RegexNode(RegexNodeEnum.ALTERNATIVE); if(node1.getType()==RegexNodeEnum.EMPTY&&node1.getList().size()==1){node1=node1.getList().getFirst();}node.addToList(node1); if(node2.getType()==RegexNodeEnum.EMPTY&&node2.getList().size()==1){node2=node2.getList().getFirst();}node.addToList(node2); node1=node;
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                                                                                                                                                                                                                                                                                                                                                                 /*if(node3!=null){ if(node3.getType()!=RegexNodeEnum.EMPTY) {return new RegexNode(RegexNodeEnum.EMPTY,node3);} else{return node3;}} else */if(node1.getType()!=RegexNodeEnum.EMPTY) {{if (true) return new RegexNode(RegexNodeEnum.EMPTY,node1);}} else{{if (true) return node1;}}
    throw new Error("Missing return statement in function");
  }

  final public RegexNode expr() throws ParseException {
    RegexNode node = null;
    RegexNode ret = null;
    node = atom();
                  ret = node;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STAR:
    case PLUS:
    case QUESTIONER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        jj_consume_token(STAR);
             if(node.getType()==RegexNodeEnum.EMPTY){ret = new RegexNode(RegexNodeEnum.TRANSPARENCY, node.getList());}else {ret = new RegexNode(RegexNodeEnum.TRANSPARENCY, node);}
        break;
      case PLUS:
        jj_consume_token(PLUS);
             if(node.getType()==RegexNodeEnum.EMPTY){ret = new RegexNode(RegexNodeEnum.REPEAT, node.getList());}else {ret = new RegexNode(RegexNodeEnum.REPEAT, node);}
        break;
      case QUESTIONER:
        jj_consume_token(QUESTIONER);
                   if(node.getType()==RegexNodeEnum.EMPTY){ret = new RegexNode(RegexNodeEnum.VOLUME, node.getList());}else {ret = new RegexNode(RegexNodeEnum.VOLUME, node);}
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public RegexNode atom() throws ParseException {
    Token charToken = null;
    RegexNode node = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CHAR:
      charToken = jj_consume_token(CHAR);
                       {if (true) return new RegexNode(RegexNodeEnum.CHARACTER, charToken.image);}
      break;
    case LEFTCLOSER:
      jj_consume_token(LEFTCLOSER);
      node = regex();
      jj_consume_token(RIGHTCLOSER);
                                                if(node.getType()==RegexNodeEnum.EMPTY){{if (true) return new RegexNode(RegexNodeEnum.CLUSTER, node.getList());}}else {{if (true) return new RegexNode(RegexNodeEnum.CLUSTER, node);}}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public NormalRegexParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[8];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x201,0x201,0x243,0x62,0x62,0x1c,0x1c,0x42,};
   }

  /** Constructor with InputStream. */
  public NormalRegexParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public NormalRegexParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new NormalRegexParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public NormalRegexParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new NormalRegexParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public NormalRegexParser(NormalRegexParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(NormalRegexParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[10];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 8; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 10; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
